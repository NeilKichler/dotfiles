#!/bin/sh
#
# z3bra - 2014 (c) wtfpl
# toggle the fullscreen state of a window
# depends on: focus.sh

# this file is used to store the previous geometry of a window
FSFILE=${FSFILE:-/tmp/fwin}
X11=${X11FSDIR:-~/run/x11}
SIZE=$XDG_CONFIG_HOME/x11fs/size
# it's pretty simple, but anyway...
usage() {
    echo "usage: $(basename $0) <wid>"
    exit 1
}

# exit if no argument given
test -z "$1" && usage

# this will unset the fullscreen state of any fullscreen window if there is one.
# this way, there will only be one window in fullscreen at a time, and no window
# will loose their previous geometry info
if test -f $FSFILE; then
    cat $FSFILE | while {
      read h 
      read w 
      read x 
      read y 
      read id
    } do
        printf '%s\n' "$h" > $X11/$id/geometry/height
        printf '%s\n' "$w" > $X11/$id/geometry/width
        printf '%s\n' "$x" > $X11/$id/geometry/x
        printf '%s\n' "$y" > $X11/$id/geometry/y
    done
fi

# if file exist and contain our window id, it means that out window is in
# fullscreen mode
if test -f $FSFILE && grep -q $1 $FSFILE; then
    # if the window we removed was our window, delete the file, so we can
    # fullscreen it again later 
    rm -f $FSFILE

else
    # if not, then put the current window in fullscreen mode, after saving its
    # geometry and id to $FSFILE we also remove any border from this window.
    cat $X11/$1/geometry/* > $FSFILE
    printf '%s\n' "$1" >> $FSFILE

    sed -ne 's/fulh=//p' $SIZE > $X11/$1/geometry/height
    sed -ne 's/fulw=//p' $SIZE > $X11/$1/geometry/width
    sed -ne 's/gaps=//p' $SIZE > $X11/$1/geometry/x
    sed -ne 's/gaps=//p' $SIZE > $X11/$1/geometry/y
    chwso -r "$1"
    printf '%s\n' "$1" > $X11/focused    
fi

# now focus the window, and put it in front, no matter which state we're in, and
# put the cursor on its bottom-right corner (for consistency)
"$XDG_CONFIG_HOME"/x11fs/focus $1
